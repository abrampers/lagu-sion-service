#+title: Architecture Decision Record for =lagu-sion-service=

* Project Description

** Background
Lagu Sion is a list of songs (song book) used by the Seventh Day Adventist Church on our church services. Currently, this songs is provided locally through an easy worship proprietary app. By using this proprietary app, church song book are limited to what the app provides. This conditions requires churches to somehow acquire the use of the proprietary software, which is not possible for churches without budget or access to it.

The second problem is that there is no legitimate datasources on the web for users to search and look up to the Lagu Sion lyrics. There are some Lagu Sion client applications such as: [[https://lagusiononline.blogspot.com/p/lagu-sion.html][blogspot site]], [[https://play.google.com/store/apps/details?id=com.lagusionlengkap.lagusionlyrics&hl=en_US&gl=US][android app]], and [[https://apps.apple.com/us/app/lagu-sion-sda/id1057777133][ios app]] with their own respective datasources. This condition is limiting creativity. Instead of doing creative work to improve functionality on the clients, we will have to spend a lot of resources to create, store, and serve the Lagu Sion songbook data.
** The Goal
The goal of this project is to create a service that serves songbooks (not limited to Lagu Sion) data.
** In Scope
This project's scope is:
- Design the architecture of the service
- Implement the actual service
- Test all the functionality (using TDD)
- Document APIs of the service
- Deploy the service so it is usable to clients
** Out of Scope
The development of the UI (Mobile or Web) client is out of scope of this document.
** Requirements
*** Design / Wireframes
#+CAPTION: Login Page
[[file:images/wireframe_1_login_page.jpg]]

* Accepted Decisions

* System Design
- How to present data (will be read heavy)
  - search
  - get lyrics
- How to input data
  - CSV?
- How to modify data

* Domain Data Structures

* APIs

** API Architecture
- REST
- GRPC
- GraphQL

** API definitions

* Storage

** DB Stack
- MongoDB
- Postgresql
- Redis

** DB Schema

* Monitoring
- Grafana + Loki?
- NewRelic / Appdynamics

* Project Structure
[[https://github.com/golang-standards/project-layout][golang-standards/project-layout]]

* Libraries

** Router
[[https://www.nicolasmerouze.com/guide-routers-golang][Golang router comparison]]

- [[http://www.gorillatoolkit.org/pkg/mux][gorilla/mux]]
- [[https://github.com/julienschmidt/httprouter][httprouter]]
- [[https://github.com/bmizerany/pat][pat]]
- [[https://github.com/gin-gonic/gin][gin]]

** Testing

** Database Client

* CI/CD Platform

Assumptions:
- Repo is public
- Empty means unlimited

| platform       | price | limits (min/month) | concurrent jobs | manual deployment? | Supported platform        |
|----------------+-------+--------------------+-----------------+--------------------+---------------------------|
| Gitlab CI      | free  |                    |                 | yes                | gitlab                    |
| GitHub Actions | free  |                    |                 | no                 | github                    |
| Travis CI      | free  |                    |             200 |                    | github, bitbucket         |
| CircleCI       | free  |              40000 |               4 | yes                | github, bitbucket         |
| Jenkins        | free  |                    |                 | yes                | github, gitlab, bitbucket |

** Gitlab CI

** GitHub Actions

** Travis CI

Private / Open Source: unlimited (need to recheck)

Currently is migrating from travis-ci.org to travis-ci.com. This might be problematic when implementing

As per [[https://docs.travis-ci.com/user/deployment/][Deployment and uploads]]: No manual deployment supported

** CircleCI

OSS: 100k credits / week
[[https://circleci.com/docs/2.0/oss/][Open source limits]]

Docker small (1 vCPU, 2 GB): 5 credit/min
Docker Medium (2 vCPU, 4 GB): 10 credit/min

Linux VM Medium (2 vCPU, 7.5 GB): 10 credit/min

Try whether docker small is cheaper to use than linux vm medium

- Telegram notification [[https://circleci.com/developer/orbs/orb/woltsu/telegram][woltsu/telegram]]
- [[https://circleci.com/docs/2.0/deployment-integrations/][Deployoment configuration]]
- [[https://circleci.com/blog/optimizing-open-source-projects-on-circleci/][Storing build artifacts]]

[[https://circleci.com/docs/2.0/circleci-images/#pre-installed-tools][Pre built]] Docker image for [[https://circleci.com/developer/images/image/cimg/go][golang]] is provided. [[https://circleci.com/docs/2.0/custom-images/][Custom built]] Docker images are also possible.

*** TODO Find artifacts storage limits
* Infrastructure
** TODO Infrastructure as a Code
- Chef
- Ansible
- Terraform
** TODO Cloud service
- AWS
- Azure
*** TODO What type of infrastructure
- Function as a service
- Virtual Private Server
* Misc Notes
- use some kind of docker compose to run service locally -> /deployments/docker-compose-local
- put server bootstrapping in this repo as well -> /deployments/bootstrap-server

